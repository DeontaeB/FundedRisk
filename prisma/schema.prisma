// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription & Payment
  stripeCustomerId String?
  paymentStatus    String @default("inactive")

  // Relations
  accounts      Account[]
  sessions      Session[]
  trades        Trade[]
  alerts        Alert[]
  subscriptions Subscription[]
  complianceRules ComplianceRule[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trade {
  id            String    @id @default(cuid())
  userId        String
  symbol        String
  side          String    // "buy" or "sell"
  quantity      Float
  price         Float
  closePrice    Float?
  orderType     String    @default("market")
  status        String    @default("open") // "open", "closed", "cancelled"
  pnl           Float?
  source        String    @default("manual") // "manual", "tradingview", "api"
  tradingViewId String?
  createdAt     DateTime  @default(now())
  closedAt      DateTime?
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
}

model ComplianceRule {
  id          String  @id @default(cuid())
  userId      String
  name        String
  type        String  // "daily_loss", "position_size", "trading_hours", "max_trades"
  threshold   Float
  isActive    Boolean @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@index([userId, isActive])
}

model Alert {
  id               String         @id @default(cuid())
  userId           String
  complianceRuleId String?
  type             String         // "warning", "violation", "info"
  title            String
  message          String
  severity         String         @default("medium") // "low", "medium", "high", "critical"
  isRead           Boolean        @default(false)
  isResolved       Boolean        @default(false)
  metadata         Json?
  createdAt        DateTime       @default(now())
  resolvedAt       DateTime?

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  complianceRule ComplianceRule? @relation(fields: [complianceRuleId], references: [id])

  @@index([userId, createdAt])
  @@index([isRead, isResolved])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "email", "sms", "push"
  title     String
  message   String
  channel   String   // "email", "sms", "in_app"
  status    String   @default("pending") // "pending", "sent", "failed"
  sentAt    DateTime?
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  stripeSubscriptionId String   @unique
  status               String   // "active", "canceled", "incomplete", "past_due"
  priceId              String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model TradingViewWebhook {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  action    String   // "buy", "sell", "close"
  quantity  Float
  price     Float?
  timestamp String
  processed Boolean  @default(false)
  tradeId   String?
  createdAt DateTime @default(now())

  @@index([userId, processed])
  @@index([timestamp])
}