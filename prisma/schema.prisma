// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription & Payment
  stripeCustomerId String?
  paymentStatus    String @default("inactive")

  // Trading Setup
  webhookUrl       String?  @unique
  isSetupComplete  Boolean  @default(false)
  
  // Notification Preferences
  notificationPreferences Json?

  // Relations
  accounts         Account[]
  sessions         Session[]
  trades           Trade[]
  alerts           Alert[]
  subscriptions    Subscription[]
  complianceRules  ComplianceRule[]
  notifications    Notification[]
  userAccounts     UserTradingAccount[]
  webhookEvents    WebhookEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trade {
  id                   String    @id @default(cuid())
  userId               String
  userTradingAccountId String?
  symbol               String
  side                 String    // "buy" or "sell"
  quantity             Float
  price                Float
  closePrice           Float?
  orderType            String    @default("market")
  status               String    @default("open") // "open", "closed", "cancelled"
  pnl                  Float?
  source               String    @default("manual") // "manual", "tradingview", "api"
  tradingViewId        String?
  createdAt            DateTime  @default(now())
  closedAt             DateTime?
  updatedAt            DateTime  @updatedAt

  // Relations
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTradingAccount   UserTradingAccount?  @relation(fields: [userTradingAccountId], references: [id])
  webhookEvents        WebhookEvent[]
  complianceChecks     ComplianceCheck[]

  @@index([userId, createdAt])
  @@index([userTradingAccountId, createdAt])
  @@index([status])
}

model ComplianceRule {
  id          String  @id @default(cuid())
  userId      String
  name        String
  type        String  // "daily_loss", "position_size", "trading_hours", "max_trades"
  threshold   Float
  isActive    Boolean @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@index([userId, isActive])
  @@unique([userId, name])
}

model Alert {
  id               String         @id @default(cuid())
  userId           String
  complianceRuleId String?
  type             String         // "warning", "violation", "info"
  title            String
  message          String
  severity         String         @default("medium") // "low", "medium", "high", "critical"
  isRead           Boolean        @default(false)
  isResolved       Boolean        @default(false)
  metadata         Json?
  createdAt        DateTime       @default(now())
  resolvedAt       DateTime?

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  complianceRule ComplianceRule? @relation(fields: [complianceRuleId], references: [id])

  @@index([userId, createdAt])
  @@index([isRead, isResolved])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "email", "sms", "push"
  title     String
  message   String
  channel   String   // "email", "sms", "in_app"
  status    String   @default("pending") // "pending", "sent", "failed"
  sentAt    DateTime?
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  stripeSubscriptionId String   @unique
  status               String   // "active", "canceled", "incomplete", "past_due"
  priceId              String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

// Prop Firm Models
model PropFirm {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts    PropFirmAccount[]
  ruleTemplates PropFirmRuleTemplate[]
  
  @@index([isActive])
}

model PropFirmAccount {
  id          String   @id @default(cuid())
  propFirmId  String
  name        String   // "Scale", "Core", "Pro", etc.
  accountSize Float    // Account balance like 50000, 100000
  isActive    Boolean  @default(true)
  
  // Relations
  propFirm         PropFirm               @relation(fields: [propFirmId], references: [id])
  userAccounts     UserTradingAccount[]
  ruleTemplates    PropFirmRuleTemplate[]
  
  @@unique([propFirmId, name, accountSize])
  @@index([propFirmId, isActive])
}

model PropFirmRuleTemplate {
  id                String   @id @default(cuid())
  propFirmId        String
  propFirmAccountId String?  // If null, applies to all accounts of this firm
  
  // Rule Configuration
  ruleType          String   // "daily_loss", "max_drawdown", "position_size", "trading_hours", "max_contracts"
  maxValue          Float?   // Max loss amount, position size, etc.
  percentage        Float?   // For percentage-based rules like drawdown
  timeStart         String?  // Trading hours start (HH:MM)
  timeEnd           String?  // Trading hours end (HH:MM)
  timezone          String?  // Timezone for trading hours
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  propFirm          PropFirm         @relation(fields: [propFirmId], references: [id])
  propFirmAccount   PropFirmAccount? @relation(fields: [propFirmAccountId], references: [id])
  
  @@index([propFirmId, ruleType])
  @@index([propFirmAccountId, ruleType])
}

model UserTradingAccount {
  id                String   @id @default(cuid())
  userId            String
  propFirmAccountId String
  
  // Account Details
  accountNumber     String?
  startingBalance   Float
  currentBalance    Float
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  propFirmAccount   PropFirmAccount    @relation(fields: [propFirmAccountId], references: [id])
  trades            Trade[]
  complianceChecks  ComplianceCheck[]
  webhookEvents     WebhookEvent[]
  
  @@index([userId, isActive])
}

// Enhanced Webhook and Trading Models
model WebhookEvent {
  id                    String   @id @default(cuid())
  userId                String
  userTradingAccountId  String?
  
  // Webhook Details
  source                String   // "tradingview", "mt4", "ninja_trader"
  rawPayload            Json
  parsedData            Json?
  
  // Trade Information
  symbol                String
  action                String   // "buy", "sell", "close_long", "close_short"
  quantity              Float?
  price                 Float?
  stopLoss              Float?
  takeProfit            Float?
  
  // Processing Status
  status                String   @default("received") // "received", "processing", "processed", "failed", "rejected"
  processingError       String?
  isComplianceViolation Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  processedAt           DateTime?
  
  // Relations
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTradingAccount    UserTradingAccount? @relation(fields: [userTradingAccountId], references: [id])
  trade                 Trade?              @relation(fields: [tradeId], references: [id])
  tradeId               String?
  complianceChecks      ComplianceCheck[]
  
  @@index([userId, status])
  @@index([createdAt])
  @@index([source])
}

model ComplianceCheck {
  id                   String   @id @default(cuid())
  userTradingAccountId String
  webhookEventId       String?
  tradeId              String?
  
  // Check Details
  ruleType             String   // "daily_loss", "position_size", etc.
  currentValue         Float    // Current loss, position size, etc.
  limitValue           Float    // The limit that was checked against
  isViolation          Boolean
  violationSeverity    String?  // "warning", "minor", "major", "critical"
  
  // Context
  checkTimestamp       DateTime @default(now())
  metadata             Json?    // Additional context data
  
  // Relations
  userTradingAccount   UserTradingAccount @relation(fields: [userTradingAccountId], references: [id])
  webhookEvent         WebhookEvent?      @relation(fields: [webhookEventId], references: [id])
  trade                Trade?             @relation(fields: [tradeId], references: [id])
  
  @@index([userTradingAccountId, isViolation])
  @@index([checkTimestamp])
}